# Configurações do banco de dados H2
# A propriedade DB_CLOSE_DELAY=-1 evita que o banco em memória seja descartado ao desconectar. Isso é útil para persistir dados temporários enquanto a aplicação está rodando.
spring.datasource.url=jdbc:h2:mem:bd;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
# Define o driver JDBC a ser utilizado para se conectar ao banco de dados H2.
spring.datasource.driver-class-name=org.h2.Driver
# Define o nome de usuário para autenticação no banco de dados H2.
spring.datasource.username=sa
# Define a senha para autenticação no banco de dados H2. No caso, está vazia.
spring.datasource.password=
# Define o dialeto do Hibernate específico para o banco de dados H2.
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect

# Exibe as queries SQL no console para facilitar o desenvolvimento e o debug.
spring.jpa.show-sql=true

# Configuração do comportamento de geração do esquema de banco de dados pelo Hibernate.
# Possíveis valores para 'spring.jpa.hibernate.ddl-auto':
# - none: Não faz alterações no banco.
# - validate: Verifica se o esquema do banco é compatível com as entidades JPA.
# - update: Atualiza o esquema do banco para refletir alterações nas entidades JPA.
# - create: Cria o banco de dados a partir do zero, apagando dados existentes.
# - create-drop: Cria o banco de dados no início e o descarta ao finalizar a aplicação (ideal para testes).
spring.jpa.hibernate.ddl-auto=update

# Configuração do console do H2
# Habilita o console web do H2 para acessar e visualizar o banco de dados.
spring.h2.console.enabled=true
# Define o caminho de acesso ao console web do H2.
spring.h2.console.path=/h2-console

# Para acessar o banco via navegador, use o endereço: http://localhost:8080/h2-console

# Configurações para JWT (JSON Web Tokens)
# Define a chave secreta usada para assinar os tokens JWT.
jwt.secret=minhachave
# Tempo de expiração do token JWT em milissegundos (exemplo: 3600000 ms = 1 hora).
jwt.expiration=3600000
